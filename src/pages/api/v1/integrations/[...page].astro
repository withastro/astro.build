---
import type { CollectionEntry } from "astro:content"
import { integrations as LAST_MODIFIED } from "~/data/last-modified.json"
import { getFilteredIntegrations, validateCategories } from "~/helpers/integrations.ts"
import { paginate } from "~/helpers/paginate.ts"
import IntegrationCard from "~/pages/integrations/_components/IntegrationCard.astro"
import "~/styles/tailwind.css"

export const prerender = false
export const partial = true

const method = Astro.request.method
const accept = Astro.request.headers.get("Accept") ?? "text/html"
const modified = Astro.request.headers.get("If-Modified-Since")
const headers = {
	accept: "application/json",
	"cache-control": "public,max-age=604800,s-max-age=604800,stale-while-revalidate=86400",
	"last-modified": LAST_MODIFIED,
}
let integrations: CollectionEntry<"integrations">[] = []

if (method === "HEAD") {
	if (modified === LAST_MODIFIED) {
		return new Response(null, { status: 304 })
	}
	return Response.json(null, { headers })
}

if (method === "GET") {
	if (modified === LAST_MODIFIED) {
		return new Response(null, { status: 304 })
	}
	const getParam = createParamGetter(Astro.url.searchParams)
	const search = getParam("search")
	const categories = getParam("categories[]") ?? []

	// with '[...page]' rest routes we'll get undefined for the first page, default that to 1
	// otherwise, try to parse the page number from the URL
	const currentPage = typeof Astro.params.page === "undefined" ? 1 : parseInt(Astro.params.page)
	const limit = Astro.url.searchParams.get("limit")
	let pageSize = 25

	if (limit) {
		try {
			pageSize = toInt(limit)
		} catch {
			return Response.json(
				{ error: `Invalid "limit" parameter: "${limit}" is not a number` },
				{ status: 400 },
			)
		}
	}
	if (!validateCategories(categories)) {
		return Response.json(
			{
				error: `Invalid "categories[]" parameter: supported values are ${validCategories
					.map((v: string) => `"${v}"`)
					.join(` | `)}`,
			},
			{ status: 400 },
		)
	}
	const filteredIntegrations = await getFilteredIntegrations({ search, categories })

	// take all matching integrations and create a paginated list of results
	const paginatedResults = paginate({
		data: filteredIntegrations,
		pageSize,
		currentPage,
		route: "/api/v1/integrations/[...page]",
		searchParams: Astro.url.searchParams,
	})

	const { page, allPages } = paginatedResults
	integrations = page.data

	// make sure the requested page number is valid, if not redirect to the first page of results
	if (allPages.length && !page) {
		return Response.json(
			{ error: `Invalid request: page ${currentPage} does not exist` },
			{ status: 400 },
		)
	}

	if (accept?.includes("application/json")) {
		const responseData = {
			...page,
			data: page.data.map(({ data }) => {
				if (data.image) data.image = new URL(data.image, Astro.url).toString()
				return data
			}),
		}

		return Response.json(responseData, { headers })
	}
}

if (method !== "GET") {
	return Response.json({ error: `${method} not allowed` }, { status: 405 })
}

if (!accept?.includes("text/html")) {
	return Response.json(
		{ error: `Invalid request: "Accept: ${accept}" is not supported` },
		{ status: 400 },
	)
}

function toInt(str: string): number {
	const value = Number.parseInt(str)
	if (Number.isNaN(value)) {
		throw new Error(`"${str}" is not a valid number`)
	}
	return value
}

function createParamGetter(searchParams: URLSearchParams) {
	function getter(key: `${string}[]`): string[] | undefined
	function getter(key: string): string | undefined
	function getter(key: string) {
		if (key.endsWith("[]")) return searchParams.getAll(key) || undefined
		return searchParams.get(key) || undefined
	}
	return getter
}
---

<div>
	{integrations.map((integration) => <IntegrationCard integration={integration} />)}
</div>
