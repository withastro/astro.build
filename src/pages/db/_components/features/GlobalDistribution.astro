---

---

<canvas class="absolute inset-0 z-0 h-[24rem] w-full" id="cobe" width="604" height="384"></canvas>

<script>
	import createGlobe from "cobe"

	let phi = 2.5
	let canvas = document.getElementById("cobe") as HTMLCanvasElement

	const rgb = (r: number, g: number, b: number) => {
		console.log([r, g, b].map((n) => n / 255))
		return [r, g, b].map((n) => n / 255) as [number, number, number]
	}

	let ro: ResizeObserver
	let globe: ReturnType<typeof createGlobe>
	function render() {
		if (ro) {
			ro.disconnect()
		}
		const { devicePixelRatio = 1 } = window
		const { width: w, height: h } = canvas.getBoundingClientRect()
		const width = w * devicePixelRatio
		const height = h * devicePixelRatio
		const size = 0.1
		globe = createGlobe(canvas, {
			devicePixelRatio,
			width,
			height,
			phi,
			theta: 0,
			dark: 1,
			diffuse: 3,
			scale: 1.125,
			mapSamples: 10240,
			mapBrightness: 7.5,
			mapBaseBrightness: 0,
			baseColor: [1, 1, 1],
			markerColor: rgb(99, 102, 241),
			glowColor: rgb(26, 29, 39),
			offset: [0, height * 0.5],
			markers: [
				{ location: [50.1109, 8.6821], size },
				{ location: [40.0583, -74.4057], size },
				{ location: [-23.5558, -46.6396], size },
				{ location: [35.6938, 139.7034], size },
				{ location: [1.3521, 103.8198], size },
				{ location: [-33.8688, 151.2093], size },
			],
			opacity: 1,
			onRender: (state) => {
				state.phi = phi
				phi += 0.001
			},
		})
		ro = new ResizeObserver(() => {
			globe.resize()
		})
		ro.observe(canvas)
	}

	render()
</script>
