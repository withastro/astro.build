---
import Icon from "astro-icon";
import AstroLogo from "~/components/AstroLogo.astro";
import Badge from "./Badge.astro";
---

<nav
	aria-label="Secondary"
	class:list={[
		"container fixed left-0 right-0 top-0 z-20 flex hidden h-header items-center bg-black shadow-lg sm:flex",
		Astro.props.class,
	]}
>
	<a
		href="#"
		class="block text-xl heading flex flex-row items-center gap-2 whitespace-nowrap"
	>
		<span class="sr-only">Astro DB</span>
		<span aria-hidden="true">
			<AstroLogo />
		</span>
		<span
			class="min-w-4 w-full bg-blue-purple-gradient bg-clip-text text-transparent"
			aria-hidden="true"
		>
			<Badge />
		</span></a
	>
	<div class="xs:p-6 mx-auto w-full max-w-screen-xl space-y-8 p-4 sm:px-8">
		<div
			class="ml-16 flex shrink flex-row items-center gap-16 gap-8 justify-end lg:justify-start"
		>
			<a
				href="#use-cases"
				class="whitespace-nowrap eyebrow link aria-current:underline underline-offset-4"
				>Use Cases</a
			>
			<a
				href="#features"
				class="whitespace-nowrap aria-current:underline underline-offset-4"
				data-astro-prefetch
				class="eyebrow link">Features</a
			>
			<a
				href="#pricing"
				data-astro-prefetch
				class="whitespace-nowrap eyebrow link aria-current:underline underline-offset-4"
				>Pricing</a
			>
		</div>
	</div>

	<div class="flex-1"></div>

	<div class="hidden gap-4 sm:flex">
		<a
			href="https://studio.astro.build/"
			class="button button-outline button-sm hidden lg:flex whitespace-nowrap"
			>Open Astro Studio
			<span><Icon name="ri:external-link-line" size="16" /></span>
		</a>
	</div>
</nav>

<script>
	const nav = document.querySelector('nav[aria-label="Secondary"]')!;
	const targets = Array.from(nav.querySelectorAll("a[href^='#']"))
		.map((a) => a.getAttribute("href")?.slice(1))
		.filter(Boolean);
	const selector = `:is(${targets.map((id) => `[id="${id}"]`).join(",")})`;
	const ids = new Map<string, number>();
	const io = new IntersectionObserver(
		([entry]) => {
			const element = entry.target.querySelector(selector);
			if (!element) return;
			const prevRatio = ids.get(element.id) ?? 0;
			if (entry.intersectionRatio > prevRatio) {
				const link = nav.querySelector(`a[href="#${element.id}"]`);
				resetSubnav();
				link?.setAttribute("aria-current", "true");
			}
			ids.set(element.id, entry.intersectionRatio);
		},
		{ threshold: [0, 0.4, 0.6, 1] },
	);
	for (const section of document.querySelectorAll("section")) {
		io.observe(section);
	}
	function resetSubnav() {
		for (const item of nav.querySelectorAll("[aria-current]")) {
			item.removeAttribute("aria-current");
		}
	}
</script>
