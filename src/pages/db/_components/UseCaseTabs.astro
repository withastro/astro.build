---
import { Icon } from "astro-icon"

import Comments from "./use-cases/Comments.astro"
import Forms from "./use-cases/Forms.astro"
import Feedback from "./use-cases/Feedback.astro"
import Blog from "./use-cases/Blog.astro"
import Auth from "./use-cases/Auth.astro"
---

<astro-db-tabs class="relative">
	<ul class="mt-16 flex max-w-full overflow-x-auto pb-1 text-astro-gray-200">
		<li>
			<button
				role="tab"
				aria-selected="true"
				class="relative block flex flex-col items-center p-4"
				data-tab="comments"
			>
				<Icon class="text-current" name="uil:comments-alt" width="40" />
				<p class="text-lg">Comments</p>
			</button>
		</li>
		<li>
			<button role="tab" class="relative block flex flex-col items-center p-4" data-tab="blog">
				<Icon class="text-current" name="uil:notes" width="40" />
				<p class="text-lg">Blog</p>
			</button>
		</li>
		<li>
			<button role="tab" class="relative block flex flex-col items-center p-4" data-tab="forms">
				<Icon class="text-current" name="uil:document-layout-left" width="40" />
				<p class="text-lg">Forms</p>
			</button>
		</li>
		<li>
			<button role="tab" class="relative block flex flex-col items-center p-4" data-tab="feedback">
				<Icon class="text-current" name="uil:question-circle" width="40" />
				<p class="text-lg">Feedback</p>
			</button>
		</li>
		<li>
			<button role="tab" class="relative block flex flex-col items-center p-4" data-tab="auth">
				<Icon class="text-current" name="uil:users-alt" width="40" />
				<p class="text-lg">Auth</p>
			</button>
		</li>
	</ul>

	<ul class="mt-20">
		<Blog />
		<Comments />
		<Forms />
		<Feedback />
		<Auth />
	</ul>
</astro-db-tabs>

<style>
	button[data-tab] {
		opacity: 0.5;
		min-width: 8rem;
	}
	button[aria-selected="true"] {
		opacity: 1;
	}
	[aria-selected="true"]::before,
	[aria-selected="true"]::after {
		content: "";
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		@apply bg-blue-purple-gradient;
		z-index: 0;
		border-radius: 8px;
	}
	button > * {
		z-index: 1;
	}
	[aria-selected="true"]::after {
		top: 1px;
		right: 1px;
		bottom: 1px;
		left: 1px;
		background: #060913
			linear-gradient(83.21deg, rgba(50, 70, 255, 0.2) 0%, rgba(184, 69, 237, 0.2) 100%);
	}
</style>
<script>
	const bind = (instance, proto) => {
		if (proto == null) {
			proto = Object.getPrototypeOf(instance)
		}
		let propertyNames = Object.getOwnPropertyNames(proto)
		for (let name of propertyNames) {
			let value = proto[name]
			if (typeof value === "function") {
				instance[name] = proto[name].bind(instance)
			}
		}
	}
	class Tabs extends HTMLElement {
		static is = "astro-db-tabs"

		constructor() {
			super()
			bind(this)
		}

		button(name) {
			return this.querySelector(`button[data-tab="${name}"]`)
		}
		buttons() {
			return this.querySelectorAll(`button[data-tab]`)
		}
		content(name) {
			return this.querySelector(`li[data-tab="${name}"]`)
		}
		contents() {
			return this.querySelectorAll(`li[data-tab]`)
		}

		connectedCallback() {
			this.addEventListener("click", this.handleClick)
		}

		disconnectedCallback() {
			this.removeEventListener("click", this.handleClick)
		}

		resetElements() {
			for (const button of this.buttons()) {
				button.removeAttribute("aria-selected")
			}
			for (const content of this.contents()) {
				content.classList.add("hidden")
			}
		}

		setActive(name) {
			const button = this.button(name)
			const content = this.content(name)

			console.log({ button, content })

			button.setAttribute("aria-selected", "true")
			content.classList.remove("hidden")
		}

		handleClick(event: Event) {
			const name = event.target.closest("button[data-tab]")?.dataset.tab
			if (!name) return

			if ("startViewTransition" in document) {
				document.startViewTransition(() => {
					this.resetElements()
					this.setActive(name)
				})
			} else {
				this.resetElements()
				this.setActive(name)
			}
		}
	}

	customElements.define(Tabs.is, Tabs)
</script>
