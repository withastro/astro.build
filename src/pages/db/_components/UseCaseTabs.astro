---
import { getImage } from "astro:assets"
import blob from "../_assets/uses-bg.png"
import background from "../_assets/use-cases-bg.png"

import Tab from "./UseCaseTab.astro"
import Blog from "./use-cases/Blog.astro"
import Auth from "./use-cases/Auth.astro"
import Forms from "./use-cases/Forms.astro"
import Feedback from "./use-cases/Feedback.astro"
import Comments from "./use-cases/Comments.astro"

const bg = await getImage({ src: blob, format: "webp", width: 1280 })
const useCasesBg = await getImage({ src: background, format: "webp", width: 1280 })
---

<astro-db-tabs class='relative'>
  <div class="mx-auto w-full max-w-screen-xl">
    <ul
      class='w-full flex items-center overflow-x-auto no-scrollbar gap-10 p-4 sm:p-0 sm:gap-1 text-astro-gray-200 sm:min-h-[10rem]'
    >
      <Tab title='Comments' icon='uil:comments-alt' active />
      <Tab title='Blog' icon='uil:notes' />
      <Tab title='Forms' icon='uil:document-layout-left' />
      <Tab title='Feedback' icon='uil:question-circle' />
      <Tab title='Auth' icon='uil:users-alt' />
    </ul>
  </div>

  <div class="z-100 mt-16 sm:mt-10 pt-[1.95rem] border-t border-t-astro-gray-600 bg-cover bg-center bg-no-repeat" 
  style={{backgroundImage: `url(${useCasesBg.src})`}}>

    <ul class='mx-auto w-full max-w-screen-xl px-4 sm:px-8'>
      <Blog />
      <Comments />
      <Forms />
      <Feedback />
      <Auth />
    </ul>
  </div>

</astro-db-tabs>

<script>
  // @ts-nocheck
  const bind = (instance, proto) => {
    if (proto == null) {
      proto = Object.getPrototypeOf(instance)
    }
    let propertyNames = Object.getOwnPropertyNames(proto)
    for (let name of propertyNames) {
      let value = proto[name]
      if (typeof value === "function") {
        instance[name] = proto[name].bind(instance)
      }
    }
  }
  class Tabs extends HTMLElement {
    static is = "astro-db-tabs"

    constructor() {
      super()
      bind(this)
    }

    button(name) {
      return this.querySelector(`button[data-tab="${name}"]`)
    }
    buttons() {
      return this.querySelectorAll(`button[data-tab]`)
    }
    content(name) {
      return this.querySelector(`li[data-tab="${name}"]`)
    }
    contents() {
      return this.querySelectorAll(`li[data-tab]`)
    }
    icon(name) {
      return this.querySelector(`div[data-tab-icon="${name}"]`)
    }
    icons() {
      return this.querySelectorAll(`div[data-tab-icon]`)
    }
    iconContainer(name) {
      return this.querySelector(`div[data-tab-icon-container="${name}"]`)
    }
    iconContainers() {
      return this.querySelectorAll(`div[data-tab-icon-container]`)
    }
    title(name) {
      return this.querySelector(`p[data-tab-title="${name}"]`)
    }
    titles() {
      return this.querySelectorAll(`p[data-tab-title]`)
    }

    connectedCallback() {
      this.addEventListener("click", this.handleClick)
    }

    disconnectedCallback() {
      this.removeEventListener("click", this.handleClick)
    }

    resetElements() {
      for (const button of this.buttons()) {
        button.removeAttribute("aria-selected")
      }
      for (const content of this.contents()) {
        content.classList.add("hidden")
      }
      for (const icon of this.icons()) {
        icon.removeAttribute("aria-selected")
      }
      for (const iconContainer of this.iconContainers()) {
        iconContainer.removeAttribute("aria-selected")
      }
      for (const title of this.titles()) {
        title.removeAttribute("aria-selected")
      }
    }

    setActive(name) {
      const icon = this.icon(name)
      const title = this.title(name)
      const button = this.button(name)
      const content = this.content(name)
      const iconContainer = this.iconContainer(name)

      console.log({ button, content })

      content.classList.remove("hidden")
      button.setAttribute("aria-selected", "true")
      icon.setAttribute("aria-selected", "true")
      title.setAttribute("aria-selected", "true")
      iconContainer.setAttribute("aria-selected", "true")
    }

    handleClick(event: Event) {
      const name = event.target.closest("button[data-tab]")?.dataset.tab
      if (!name) return

      if ("startViewTransition" in document) {
        document.startViewTransition(() => {
          this.resetElements()
          this.setActive(name)
        })
      } else {
        this.resetElements()
        this.setActive(name)
      }
    }
  }

  customElements.define(Tabs.is, Tabs)
</script>
