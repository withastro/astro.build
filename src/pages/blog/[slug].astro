---
import { Image } from 'astro:assets';
import { type CollectionEntry, getCollection, getEntry } from 'astro:content';
import { format } from 'date-fns';
import Avatar from '~/components/Avatar.astro';
import { resolveCoverImage, resolveSocialImage } from '~/content/blog/_resolveImage.js';
import { randomFromArray } from '~/helpers/random.js';
import Layout from '~/layouts/MainLayout.astro';
import Promo from './_components/Promo.astro';
import RelatedPosts from './_components/RelatedPosts.astro';

export type Props = {
	post: CollectionEntry<'blog'>;
};

export async function getStaticPaths() {
	const blog = await getCollection('blog');

	return blog.map((post) => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

const { post } = Astro.props;

const { data, render } = post;
const { Content } = await render();

const coverImage = await resolveCoverImage(post);
const socialImage = await resolveSocialImage(post);
const socialImageUrl = socialImage && new URL(socialImage.src, Astro.site);

const authors = await Promise.all(data.authors.map((author) => getEntry('authors', author))).then(
	(authors) => authors.filter(Boolean) as CollectionEntry<'authors'>[],
);

const gradients = [
	'bg-red-pink-gradient',
	'bg-blue-green-gradient',
	'bg-blue-purple-gradient',
	'bg-orange-yellow-gradient',
];

const placeholderGradient = randomFromArray(gradients);

/** Data describing the current blog post for use in a JSON-LD script tag that Google can slurp up. */
const structuredData = {
	'@context': 'https://schema.org',
	'@type': 'BlogPosting',
	'@id': Astro.url,
	headline: data.title,
	description: data.description,
	...(socialImageUrl && { thumbnailUrl: socialImageUrl, image: [socialImageUrl] }),
	datePublished: data.publishDate.toISOString(),
	potentialAction: [{ '@type': 'ReadAction', target: [Astro.url] }],
	author: authors.map(({ id, data }) => ({
		'@type': id === 'astro-team' ? 'Organization' : 'Person',
		'@id': `https://astro.build/blog/#/author/${id}`,
		name: data.name,
		sameAs: data.bluesky || data.twitter || data.mastodon || data.github,
		image: data.image && new URL(data.image.src, Astro.site),
	})),
};
---

<Layout
	title={data.title}
	description={data.description}
	pageType="article"
	image={socialImage && { src: socialImage.src, alt: data.title }}
>
	{
		coverImage ? (
			<div class="mx-auto w-full max-w-screen-lg md:-mb-10 lg:-mb-12 xl:-mb-16">
				<Image
					src={coverImage}
					widths={[766, 1500]}
					sizes="100vw"
					loading="eager"
					alt=""
					class="min-h-[240px] w-full object-cover"
				/>
			</div>
		) : (
			<div
				class:list={[
					'z-blur -mb-56 h-64 w-full md:-mb-52 md:h-64 lg:-mb-80 lg:h-96',
					placeholderGradient,
				]}
			/>
		)
	}

	<div class="grid-container overflow-visible relative mx-auto max-w-screen-lg md:z-10">
		<div
			class="mx-auto w-fit max-w-full bg-black py-8 md:px-10 md:py-12 lg:p-12 lg:py-16 xl:p-16 xl:py-20"
		>
			<header class="mx-auto w-full max-w-prose text-center">
				<time class="code text-astro-gray-200" datetime={data.publishDate.toISOString()}>
					{format(data.publishDate, 'MMMM d, yyyy')}
				</time>
				<h1 class="heading-3 mb-4 mt-2 md:heading-2 sm:mb-5 sm:mt-3">{data.title}</h1>
				<div
					class="code flex flex-wrap items-center justify-center gap-x-4 gap-y-2 text-astro-gray-200 md:gap-y-4"
				>
					<span>By</span>
					{
						authors.map((author) => {
							return (
								<div class="flex items-center gap-2">
									<Avatar name={author.id} lg />
									<span>{author.data.name}</span>
								</div>
							);
						})
					}
				</div>
			</header>
			<hr class="-mx-16 my-8 border-astro-gray-500 lg:my-16" />
			<div class="flex flex-wrap gap-y-12 lg:gap-y-16 max-w-prose">
				<article class="prose">
					<Content />
				</article>
				<hr class="2xl:hidden -mx-16 basis-[calc(100%+8rem)] border-astro-gray-500" />
				<div class="w-full 2xl:w-0 2xl:mt-24 flex flex-col 2xl:before:h-full">
					<div class="2xl:ml-[9rem] 2xl:w-56 2xl:sticky 2xl:bottom-12">
						<Promo />
					</div>
				</div>
				{
					data.related.length > 0 && (
						<>
							<hr class="-mx-16 basis-[calc(100%+8rem)] border-astro-gray-500" />
							<nav aria-labelledby="_related-posts">
								<h2 class="heading-3" id="_related-posts">
									Related Posts
								</h2>
								<RelatedPosts posts={data.related} />
							</nav>
						</>
					)
				}
			</div>
		</div>
	</div>
	<script is:inline type="application/ld+json" set:html={JSON.stringify(structuredData)} />
</Layout>

<script>
	// Remove autoplay from videos when `prefers-reduced-motion: reduce`
	const autoplayVideos = document.querySelectorAll('video[autoplay]');
	const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

	if (prefersReducedMotion) {
		autoplayVideos.forEach((video) => {
			video.removeAttribute('autoplay');
			// Add controls attribute so user can still play the video if they want
			video.setAttribute('controls', 'true');
		});
	}
</script>
