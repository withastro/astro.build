---
import { fetchCollections, fetchThemesForCollection } from '../../data/themes.ts';
import Layout from '../../layouts/Catalog.astro';
import ThemeCard from '../../components/themes/ThemeCard.astro';

export async function getStaticPaths({rss}) {
    const collections = await fetchCollections();
    // WORKAROUND: Add RSS feed here for the blog, since we don't have a better place.
    // Move this back when we add support for RSS outside of getStaticPaths().
    const allPosts = await Astro.fetchContent('../blog/*.md');
    const sortedPosts = allPosts.sort((a, b) => Number(new Date(b.date)) - Number(new Date(a.date)));
    rss({
        // The RSS Feed title, description, and custom metadata.
        title: 'The Astro Blog',
        // See "Styling" section below
        description: 'News and updates about Astro.',
        // The list of items for your RSS feed, sorted.
        items: sortedPosts.map(item => ({
            title: item.title,
            description: item.description,
            link: item.url,
            pubDate: item.date,
        })),
    });
    return collections.map(({ text, slug }) => ({
        params: {
            slug,
        },
    }));
}

const { slug } = Astro.request.params;
const themes: App.Theme[] = await fetchThemesForCollection(slug);
const collections = await fetchCollections();

const meta = {
    title: 'Themes',
    description: 'Start your next Astro project with a real world theme built by our amazing community.'
}
---

<Layout meta={meta} {collections} current={slug} baseHref="/themes">
    <Fragment slot="info">
        <a
            href="https://github.com/withastro/astro.build/issues/new/choose"
            target="_blank"
            rel="noopener noreferrer"
            class="subtle underline">
            Add your own starter project.
        </a>
        <span>Questions about building your own themes? Join our community on</span>
        <a href="https://astro.build/chat" class="subtle underline">Discord!</a>
    </Fragment>

    <Fragment slot="cards">
        {themes.map(theme => (<ThemeCard theme={theme} />))}
    </Fragment>
</Layout>
