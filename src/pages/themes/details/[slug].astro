---
import CardGrid from "~/components/CardGrid.astro"
import CardGridGroup from "~/components/CardGridGroup.astro"
import ImageGallery from "~/components/ImageGallery.astro"
import { sanitizeThemeDescription } from "~/helpers/themes.ts"
import LeftArrowIcon from "~/icons/LeftArrowIcon.jsx"
import MainLayout from "~/layouts/MainLayout.astro"
import ThemeCTAs from "../_components/ThemeCTAs.astro"
import ThemeCard from "../_components/ThemeCard.astro"
import ThemeStats from "../_components/ThemeStats.astro"
import { Image } from "astro:assets"

export const prerender = false

const slug = Astro.params.slug as string

const theme = await fetch(`${import.meta.env.THEMES_API_URL}/api/themes/details?slug=${slug}`).then(
	(res) => res.json(),
)

const relatedThemes: Array<any> = await fetch(
	`${import.meta.env.THEMES_API_URL}/api/themes/related?slug=${slug}`,
).then((res) => res.json())
---

<MainLayout
	title={theme.Theme.title}
	description={theme.Theme.description}
	image={{ src: theme.Theme.image, alt: theme.Theme.title }}
>
	<div class="grid-container gap-y-0">
		{
			theme.Theme.images.length > 1 ? (
				<ImageGallery
					images={[theme.Theme.image, ...theme.Theme.images]}
					class="bleed-full mx-auto w-full border-astro-gray-500 xl:border-x xl:border-b"
					style="max-width: var(--container-width, 1280px)"
				/>
			) : (
				<Image
					src={theme.Theme.image}
					inferSize
					alt=""
					class="mx-auto aspect-video w-full border-astro-gray-500 object-cover object-top xl:border-x xl:border-b"
					decoding="async"
				/>
			)
		}
		<div class="flex flex-col border-astro-gray-500 md:flex-row xl:border-x">
			<section class="flex w-full flex-col gap-6 py-6 md:gap-8 md:p-8 lg:gap-10 lg:px-20 lg:py-10">
				<a
					href="/themes/"
					data-astro-prefetch
					class="flex items-center gap-2 self-start text-sm text-astro-gray-200"
				>
					<LeftArrowIcon aria-hidden="true" />
					<span class="pr-2">Back to themes</span>
				</a>
				<div>
					<h1 class="heading-3 mb-4 sm:heading-2">{theme.Theme.title}</h1>
					<p class="text-lg text-astro-gray-200 lg:text-xl">{theme.Theme.description}</p>
					<ThemeCTAs theme={theme} class="py-6 md:hidden" />
					<hr class="border-astro-gray-500 md:hidden" />
					<ThemeStats theme={theme} class="py-4 md:hidden" />
				</div>
				<hr class="hidden border-astro-gray-500 md:block" />
				<article class="prose" set:html={sanitizeThemeDescription(theme.Theme.body)} />
			</section>

			<aside
				class="hidden w-full divide-y divide-astro-gray-500 border-astro-gray-500 md:block md:max-w-md md:border-l"
			>
				<ThemeCTAs theme={theme} class="p-6 lg:p-8 xl:p-10" />
				<hr class="border-astro-gray-500" />
				<ThemeStats theme={theme} class="p-6 lg:p-8 xl:p-10" />
			</aside>
		</div>
		{
			relatedThemes.length > 0 && (
				<div class="related bleed-full relative border-t border-astro-gray-500">
					<div class="grid-container gap-y-10 pb-0 pt-20">
						<CardGridGroup
							title="Other themes to consider"
							cta={{ href: "/themes/", text: "View more themes" }}
						>
							<CardGrid class="md:grid-cols-2 lg:grid-cols-3">
								{relatedThemes.map((theme) => (
									<ThemeCard theme={theme} />
								))}
							</CardGrid>
						</CardGridGroup>
					</div>
				</div>
			)
		}
	</div>

	<style>
		.grid-container :global(picture) {
			@apply mx-auto w-full;
			grid-column: 1 / -1;
			max-width: var(--container-width, 1280px);
		}

		.related::before {
			@apply bg-grid absolute aspect-square w-full;
			content: "";
			mask-image: linear-gradient(to bottom, white, transparent);
		}
	</style>
</MainLayout>
