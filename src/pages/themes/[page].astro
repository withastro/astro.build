---
import CardGrid from '~/components/CardGrid.astro';
import CardGridGroup from '~/components/CardGridGroup.astro';
import Pagination from '~/components/Pagination.astro';
import SearchFilter, { type FilterGroup } from '~/components/SearchFilter.astro';
import SidebarLayout from '~/components/SidebarLayout.astro';
import SidebarPanel from '~/components/SidebarPanel.astro';
import { THEMES_API_URL } from '~/helpers/constants.ts';
import { paginate } from '~/helpers/paginate.js';
import MainLayout from '~/layouts/MainLayout.astro';
import SubmitTheme from './_components/SubmitTheme.astro';
import ThemeCard from './_components/ThemeCard.astro';
import type { ThemeAndAuthor, ThemeCategory, ThemeTool } from './_types/index.ts';

export const prerender = false;

const currentPage = Astro.params.page && Number.parseInt(Astro.params.page);

// invalid page number!
if (!currentPage || Number.isNaN(currentPage)) {
	return Astro.redirect('/404');
}

// search term from the search/filter panel
const search = Astro.url.searchParams.get('search');

// get a list of all supported categories & tools, this is the same list used by the zod schema
const [categories, tools]: [ThemeCategory[], ThemeTool[]] = await fetch(
	`${THEMES_API_URL}/api/themes/tools`,
).then((res) => res.json().then((data) => [data.themeCategories, data.themeTools]));

// get a list of category filters applied to the request
const selectedCategories = Astro.url.searchParams.getAll('categories[]');

// massage category data for the Filter components
const categoryFilter: FilterGroup = {
	title: 'Categories',
	options: categories.map((c) => ({
		id: c.value,
		name: 'categories[]',
		value: c.value,
		label: c.name,
		selected: selectedCategories.includes(c.value),
	})),
};

// get a list of tool filters applied to the request
const selectedTools = Astro.url.searchParams.getAll('technology[]');

// massage tool data for the Filter components
const toolFilter: FilterGroup = {
	title: 'Technology',
	options: tools.map((t) => ({
		id: t.value,
		name: 'technology[]',
		value: t.value,
		label: t.name,
		selected: selectedTools.includes(t.value),
	})),
};

const ThemePricing = new Map<string, string>([
	['free', 'Free'],
	['paid', 'Paid'],
]);

// get a list of tool filters applied to the request
const selectedPricing = Astro.url.searchParams.getAll('price[]');

// massage tool data for the Filter components
const priceFilter: FilterGroup = {
	title: 'Pricing',
	options: [...ThemePricing].map(([id, label]) => ({
		id,
		name: 'price[]',
		value: id,
		label,
		selected: selectedPricing.includes(id),
	})),
};

const allThemes: ThemeAndAuthor[] = await fetch(
	`${THEMES_API_URL}/api/themes?${Astro.url.searchParams}`,
).then((res) => res.json());

// take all matching themes and create a paginated list of results
const paginatedResults = paginate({
	data: allThemes.filter((theme) => !theme.Theme.featured),
	pageSize: 18,
	currentPage,
	route: '/themes/[...page]',
	searchParams: Astro.url.searchParams,
});

const { page, allPages } = paginatedResults;

// make sure the requested page number is valid, if not redirect to the first page of results
if (allPages.length && !page) {
	return Astro.redirect(allPages[0]);
}

const themes = page.data;
---

<MainLayout title="Themes" image={{ src: '/og/themes.jpg', alt: 'Explore the possibilities' }}>
	<div class="relative bg-grid">
		<div class="grid-container">
			<h1
				class="mx-auto pt-24 md:pt-32 lg:pt-40 w-full max-w-screen-xl text-center text-balance heading-3 sm:heading-2 lg:heading-1"
			>
				Jumpstart your next project with a theme
			</h1>
		</div>
	</div>

	<SidebarLayout>
		<Fragment slot="sidebar">
			<SidebarPanel>
				<SearchFilter
					indexRoute="/themes/1/"
					groups={[categoryFilter, toolFilter, priceFilter]}
					search={search}
					searchPlaceholder="Search for a theme"
				/>
			</SidebarPanel>
			<SubmitTheme class="hidden lg:block" />
		</Fragment>

		{
			themes.length > 0 ? (
				<div class="flex flex-col items-center gap-8 md:gap-10 lg:gap-12 sm:px-4 lg:px-8 xl:px-10 pt-8 lg:pt-10 pb-10 sm:pb-12 md:pb-16 lg:pb-20">
					<h2 class="sr-only">Themes</h2>

					<CardGridGroup>
						<CardGrid class="sm:grid-cols-2 xl:grid-cols-3 w-full max-w-screen-xl">
							{themes.map((theme) => (
								<ThemeCard theme={theme} />
							))}
						</CardGrid>
					</CardGridGroup>

					{allPages.length > 1 && (
						<Pagination restRoute page={page} allPages={allPages} class="mx-auto" />
					)}
				</div>
			) : (
				<div class="flex flex-col items-center gap-12 sm:px-4 md:px-8 lg:px-10 pt-8 lg:pt-10 text-center">
					<p>
						<strong>0</strong> results found for themes matching <strong>"{search}"</strong>
					</p>
					<a href="/themes/1/" data-astro-prefetch class="button button-primary">
						Clear filters
					</a>
				</div>
			)
		}

		<SubmitTheme class="lg:hidden" />
	</SidebarLayout>
</MainLayout>
