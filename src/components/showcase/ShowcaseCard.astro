---
import clsx from 'clsx'
import { generateImage, generatePlaceholder } from 'astro-eleventy-img'

export interface Props {
    site: App.ShowcaseSite;
}

const { site } = Astro.props as Props;

const widths = site.highlight ? [453, 906, null] : [453, 906]
const sizes = site.highlight ? '(min-width: 1024px) 67vw, 100vw' : '(max-width: 640px) 50vw, (max-width: 1024px) 33vw, 100vw)'

const {webp, avif, png} = generateImage(site.image.src, {
    widths,
    formats: ['webp', 'avif', 'png']
})

const avifSrcset = avif.map(({ srcset }) => srcset).join(',')
const webpSrcset = webp.map(({ srcset }) => srcset).join(',')
const pngSrcset = png.map(({ srcset }) => srcset).join(',')

const placeholder = await generatePlaceholder(site.image.src)
---

<article onload="console.log('loaded')" class={clsx("relative flex flex-col rounded-lg overflow-hidden shadow-md bg-white aspect-w-16 aspect-h-9", site.highlight && "sm:col-span-2 sm:row-span-2")}>
    <a {...site.url} target="_blank" alt={site.title} rel="noopener noreferrer">
        <span class="sr-only">{site.title}</span>

        <picture class="w-full h-full">
            <source type="image/avif" srcset={avifSrcset} {sizes} />
            <source type="image/webp" srcset={webpSrcset} {sizes} />
            <source type="image/png" srcset={pngSrcset} {sizes} />
            <img class="w-full h-full object-cover rounded-lg overflow-hidden" {sizes} loading="lazy" decoding="async" src={png[1].url} width="906" height="514" onload="this.style.backgroundImage='none';this.classList.add('loaded')" style={`background-size: cover; background-image: url(${placeholder.dataURI});`} />
        </picture>
    </a>

    <footer class="pointer-events-none absolute z-10 py-4 rounded-b-lg overflow-hidden bg-black text-center text-white font-normal h-fit inset-x-0 top-full -translate-y-full opacity-0 transition-opacity duration-300 ease-out">
        <p>{site.title}</p>
        <small {...site.url} class="underline font-light">{site.url.href}</small>
    </footer>
</article>

<style>
    :global(.js) img {
        transition: filter 300ms ease;
        will-change: filter;
    }

    :global(.js) img:not(.loaded) {
        filter: blur(15px);
    }

    picture::after {
        @apply absolute inset-0 bg-black rounded-lg overflow-hidden opacity-0 transition-opacity duration-150 ease-out;
        content: "";
    }

    article:hover picture::after, a:focus picture::after {
        @apply opacity-40;
    }

    article:hover footer, a:focus + footer {
        @apply opacity-100;
    }
</style>