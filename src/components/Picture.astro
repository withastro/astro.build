---
import { getImage } from '@astrojs/image'
import { Image } from '@astrojs/image/components'
// @ts-ignore
import loader from 'virtual:image-loader'
import type { ImageMetadata, OutputFormat } from '@astrojs/image'
import { lookup } from 'mrmime'

export interface Props {
    src: ImageMetadata
    alt: string
    sizes: HTMLImageElement['sizes']
    widths: number[]
    formats?: OutputFormat[]
}

const { src, alt, sizes, widths, formats = ['avif', 'webp', 'jpeg'] } = Astro.props as Props

const aspectRatio = src.width / src.height;

async function getSource(format: OutputFormat) {
    const imgs = await Promise.all(widths.map(async (width) => {
        const img = await getImage(loader, { src: src.src, format, width, height: Math.round(width / aspectRatio) });
        return `${img.src} ${width}w`
    }))

    return {
        type: lookup(format) || format,
        srcset: imgs.join(',')
    }
}

const sources = await Promise.all(formats.map(format => getSource(format)))

const width = widths.sort().shift()
const height = Math.round(width / aspectRatio)
---

<picture>
    {sources.map(attrs => (<source {...attrs} {sizes}>))}
    <Image {sizes} {src} {alt} {width} {height} loading="lazy" decoding="async" />
</picture>