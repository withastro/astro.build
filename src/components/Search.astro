---
import { Sprite } from 'astro-icon';

export interface Props {
    id: string;
    placeholder: string;
    selector: string;
    groupSelector?: string;
}

const { id, placeholder, selector, groupSelector } = Astro.props as Props;

const inlineStyle = `
    ${selector}[hidden] {
        display: none;
    }

`
---

<section>
    <label>
        <input type="text" {id} {placeholder}>
        <div>
            <Sprite pack="heroicons-outline" name="search" size={24} aria-hidden="true" />
        </div>
        <span class="sr-only visually-hidden">Search</span>
    </label>
</section>

<style set:html={inlineStyle}></style>

<script src="https://polyfill.io/v3/polyfill.min.js?features=URLSearchParams" />
<script type="module" define:vars={{selector, groupSelector, id}}>
    /* https://gomakethings.com/how-to-create-a-search-page-for-a-static-website-with-vanilla-js/ */
    const stopWords = ['a', 'an', 'and', 'are', 'aren\'t', 'as', 'by', 'can', 'cannot', 'can\'t', 'could', 'couldn\'t', 'how', 'is', 'isn\'t', 'it', 'its', 'it\'s', 'that', 'the', 'their', 'there', 'they', 'they\'re', 'them', 'to', 'too', 'us', 'very', 'was', 'we', 'well', 'were', 'what', 'whatever', 'when', 'whenever', 'where', 'with', 'would', 'yet', 'you', 'your', 'yours', 'yourself', 'yourselves', 'the'];

    const input = document.getElementById(id);
    const items = document.querySelectorAll(selector);
    const groups = groupSelector ? document.querySelectorAll(groupSelector) : [];

    const FPS_30 = 1000 / 30;

    function debounce(fn, timeout = 150) {
        let timer;
        return (...args) => {
            clearTimeout(timer);
            timer = setTimeout(() => fn.apply(this, args), timeout);
        }
    }

    const updateOpen = () => {
        requestAnimationFrame(() => {
        (!!input.value || document.activeElement === input)
            ? input.parentElement.setAttribute('open', '')
            : input.parentElement.removeAttribute('open');
        });
    }

    const update = () => {
        updateOpen();

        const regexMap = input.value.toLowerCase()
            .split(' ')
            .filter(word => word.length && !stopWords.includes(word))
            .map(word => new RegExp(word, 'i'));

        for (const item of items) {
            const isMatch = !regexMap.length || regexMap.some(regex => !!item.textContent.match(regex));
            isMatch ? item.removeAttribute('hidden') : item.setAttribute('hidden', '');
        }

        for (const group of groups) {
            const matchedItems = group.querySelectorAll(`${selector}:not([hidden])`)
            matchedItems.length > 0 ? group.removeAttribute('hidden') : group.setAttribute('hidden', '');
        }

        updateURL()
    }

    const updateURL = () => {
        const q = input.value?.trim()

        if (q) {
            const params = new URLSearchParams()
            params.set('q', q)
            window.history.replaceState(null, null, `?${params.toString()}`)
        } else {
            const [href] = window.location.href.split('?')
            window.history.replaceState(null, null, href)
        }
    }

    const hydrateQuery = () => {
        const params = new URLSearchParams(location.search)
        input.value = params.get('q') || ''
    }

    input.addEventListener('input', debounce(update, FPS_30), true);
    input.addEventListener('focus', updateOpen, true);
    input.addEventListener('blur', updateOpen, true);
    
    hydrateQuery()
    update();
</script>

<style>
    section {
        display: flex;
        justify-content: flex-end;
        font-size: 16px;
        width: calc(25ch + 2.5rem);
    }

    label {
        display: flex;
        border-radius: 9999px;
        padding: 0.25rem;
        background: var(--color-white);
    }

    input {
        line-height: 2.5rem;
        width: 25ch;
        max-width: 25ch;
        padding-left: 0.75rem;
        background: transparent;
        font-size: 16px;
        outline: none;
    }

    input::placeholder {
        color: var(--color-midnight);
        opacity: 0.75;
    }

    div {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 9999px;
        background: var(--color-dusk);
        color: var(--color-white);
    }

    @media (max-width: 768px) {
        label, section {
            width: 100%;
        }

        input {
            flex: 1;
            max-width: unset;
        }
    }

    @media(hover: hover) {
        label {
            background: transparent;
        }

        input {
            max-width: 0;
            padding-left: 0;
        }

        input, div {
            transition: 250ms ease;
        }

        input:focus,
        input:not(:placeholder-shown) {
            max-width: initial;
            padding: 0 .5rem;
            padding-left: 0.75rem;
        }

        div {
            background: transparent;
            color: var(--color-midnight);
        }

        label:hover, label[open] {
            background: var(--color-white);
        }

        label:hover > input {
            max-width: 25ch;
            padding: 0 .5rem;
            padding-left: 0.75rem;
        }

        label:hover > div,
        input:focus + div,
        input:not(:placeholder-shown) + div {
            background: var(--color-dusk);
            color: var(--color-white);
        }
    }
</style>