---
export type Props = Omit<astroHTML.JSX.InputHTMLAttributes, 'type' | 'accept'>

const imageTypes = ['image/gif', 'image/jpeg', 'image/png', 'image/webp'].join(
    ','
)
---

<image-input class="contents">
    <button
        type="button"
        data-dropzone
        class="hidden w-full max-w-md aspect-[16/9] mb-4 bg-center bg-cover bg-neutral-100 border-2 border-dashed border-neutral-400 flex-col items-center justify-center gap-2 rounded-md text-neutral-600 transition hover:bg-neutral-200 focus:outline-none focus-visible:border-2 focus-visible:border-primary-400 group relative overflow-hidden"
    >
        <span class="text-2xl">
            Preview image {
                Astro.props.required && (
                    <span
                        class="text-red-500 text-base align-text-top"
                        aria-hidden
                    >
                        *
                    </span>
                )
            }
        </span>
        <span>16:9, 906px wide or larger.</span>
        <img
            data-dropzone-image
            alt=""
            class="w-full h-full absolute inset-0 object-cover group-hover:opacity-25 transition"
        />
    </button>
    <label>
        <div data-label-text class="text-sm font-medium leading-none mb-1">
            Preview image
        </div>
        <input {...Astro.props} type="file" accept={imageTypes} />
    </label>
</image-input>

<script>
    class ImageInputElement extends HTMLElement {
        input = this.querySelector('input')
        dropzone = this.querySelector<HTMLElement>('[data-dropzone]')
        dropzoneImage = this.querySelector<HTMLImageElement>(
            '[data-dropzone-image]'
        )
        labelText = this.querySelector<HTMLElement>('[data-label-text]')

        constructor() {
            super()
            // this.input.hidden = true
            this.input.addEventListener('input', this.handleFiles)

            this.labelText.classList.add('sr-only')

            this.dropzone.classList.remove('hidden')
            this.dropzone.classList.add('flex')
            this.dropzone.addEventListener('dragover', this.handleDragOver)
            this.dropzone.addEventListener('drop', this.handleDrop)
            this.dropzone.addEventListener('click', this.handleClick)

            this.dropzoneImage.style.display = 'none'
        }

        setDropzoneImage = (fileUrl) => {
            if (fileUrl) {
                this.dropzoneImage.src = fileUrl
                this.dropzoneImage.style.display = 'block'
            } else {
                this.dropzoneImage.src = ''
                this.dropzoneImage.style.display = 'none'
            }
        }

        handleFiles = () => {
            const file = this.input.files[0]
            this.setDropzoneImage(file && URL.createObjectURL(file))
        }

        handleDragOver = (e) => {
            e.preventDefault()
        }

        handleDrop = (e) => {
            e.preventDefault()
            const files = e.dataTransfer.files
            if (!files?.length) return

            this.input.files = files
            this.handleFiles()
        }

        handleClick = () => {
            this.input.click()
        }
    }
    customElements.define('image-input', ImageInputElement)
</script>
