---
export interface Props<T> {
    each: Iterable<T>
}

const { each } = Astro.props
---

<astro-carousel>
    <ul>
        {(function*() {
            for (const value of each) {
                let html = Astro.slots.render('default', [value])

                yield (<li><Fragment set:html={html} /></li>)
                yield '\n'
            }
        })}
    </ul>
    {each.length > 1 && (
        <nav class="flex items-center justify-center gap-2 py-4" aria-hidden="true">
            {each.map((_, i) => (<div class='h-2.5 w-2.5 bg-primary-300 rounded-full' />))}
        </nav>
    )}
</astro-carousel>

<script>
    function throttle(fn, delay = 50) {
        let lastCalled = 0
        return (...args) => {
            let now = new Date().getTime()
            if (now - lastCalled < delay) {
                return
            }
            lastCalled = now
            return fn(...args)
        }
    }

    function safeParse(maybeNumber: any) {
        try {
            return parseInt(maybeNumber)
        } catch {
            return undefined
        }
    }

    class AstroCarousel extends HTMLElement {
        static get observedAttributes() { return ['selected'] }

        connectedCallback() {
            this.selected = 0

            this.listElem?.addEventListener('scroll', throttle(() => {
                this.selected = this.calcSelected()
            }))

            this.navBubbles?.forEach((bubble, i) =>
                bubble.addEventListener('click', () => this.scrollToIndex(i))
            )
        }

        attributeChangedCallback(name: string, oldValue: string, newValue: string) {
            if (name !== 'selected') { return }

            const index = safeParse(newValue)

            this.itemElems.forEach((item, i) => {
                if (i === index) {
                    this.navBubbles[i].classList.add('selected')
                } else {
                    this.navBubbles[i].classList.remove('selected')
                }
            })
        }

        get listElem() {
            return this.querySelector<HTMLElement>('ul')
        }

        get itemElems() {
            return Array.from(this.querySelectorAll<HTMLElement>('li'))
        }

        get navBubbles() {
            return Array.from(this.querySelectorAll<HTMLElement>('nav div'))
        }

        get selected() {
            return safeParse(this.getAttribute('selected'))
        }

        set selected(index: number) {
            this.setAttribute('selected', index.toString())
        }

        calcSelected() {
            const carouselRect = this.listElem.getBoundingClientRect()
            return this.itemElems.findIndex((elem) => Math.abs(elem.getBoundingClientRect().left - carouselRect.left) < (carouselRect.width / 2))
        }

        scrollToIndex(index: number) {
            this.itemElems[index].scrollIntoView({ behavior: 'smooth', block: 'nearest' })
        }
    }

    customElements.define('astro-carousel', AstroCarousel)
</script>

<style>
    ul {
        display: flex;
        overflow-x: scroll;
        overscroll-behavior-x: contain;
        scroll-snap-type: x mandatory;
        scroll-padding: 0;
    }

    @media (pointer:coarse) {
        ul {
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        ul::-webkit-scrollbar {
            display: none;
        }
    }

    ul li {
        position: relative;
        width: 100%;
        flex-shrink: 0;
        scroll-snap-align: start;
        scroll-snap-stop: always;
    }

    nav div {
        will-change: width, background;
        transition: background 250ms ease-in-out, width 250ms ease-in-out;
    }

    .selected {
        @apply w-5 bg-primary-700;
    }
</style>